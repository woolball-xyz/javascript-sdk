/*
 * Woolball AI Network API
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.71
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WoolballAiNetworkApi);
  }
}(this, function(expect, WoolballAiNetworkApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TextGenerationRequestContract', function() {
      beforeEach(function() {
        instance = new WoolballAiNetworkApi.TextGenerationRequestContract();
      });

      it('should create an instance of TextGenerationRequestContract', function() {
        // TODO: update the code to test TextGenerationRequestContract
        expect(instance).to.be.a(WoolballAiNetworkApi.TextGenerationRequestContract);
      });

      it('should have the property provider (base name: "provider")', function() {
        // TODO: update the code to test the property provider
        expect(instance).to.have.property('provider');
        // expect(instance.provider).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property input (base name: "input")', function() {
        // TODO: update the code to test the property input
        expect(instance).to.have.property('input');
        // expect(instance.input).to.be(expectedValueLiteral);
      });

      it('should have the property topK (base name: "top_k")', function() {
        // TODO: update the code to test the property topK
        expect(instance).to.have.property('topK');
        // expect(instance.topK).to.be(expectedValueLiteral);
      });

      it('should have the property topP (base name: "top_p")', function() {
        // TODO: update the code to test the property topP
        expect(instance).to.have.property('topP');
        // expect(instance.topP).to.be(expectedValueLiteral);
      });

      it('should have the property temperature (base name: "temperature")', function() {
        // TODO: update the code to test the property temperature
        expect(instance).to.have.property('temperature');
        // expect(instance.temperature).to.be(expectedValueLiteral);
      });

      it('should have the property repetitionPenalty (base name: "repetition_penalty")', function() {
        // TODO: update the code to test the property repetitionPenalty
        expect(instance).to.have.property('repetitionPenalty');
        // expect(instance.repetitionPenalty).to.be(expectedValueLiteral);
      });

      it('should have the property dtype (base name: "dtype")', function() {
        // TODO: update the code to test the property dtype
        expect(instance).to.have.property('dtype');
        // expect(instance.dtype).to.be(expectedValueLiteral);
      });

      it('should have the property maxLength (base name: "max_length")', function() {
        // TODO: update the code to test the property maxLength
        expect(instance).to.have.property('maxLength');
        // expect(instance.maxLength).to.be(expectedValueLiteral);
      });

      it('should have the property maxNewTokens (base name: "max_new_tokens")', function() {
        // TODO: update the code to test the property maxNewTokens
        expect(instance).to.have.property('maxNewTokens');
        // expect(instance.maxNewTokens).to.be(expectedValueLiteral);
      });

      it('should have the property minLength (base name: "min_length")', function() {
        // TODO: update the code to test the property minLength
        expect(instance).to.have.property('minLength');
        // expect(instance.minLength).to.be(expectedValueLiteral);
      });

      it('should have the property minNewTokens (base name: "min_new_tokens")', function() {
        // TODO: update the code to test the property minNewTokens
        expect(instance).to.have.property('minNewTokens');
        // expect(instance.minNewTokens).to.be(expectedValueLiteral);
      });

      it('should have the property doSample (base name: "do_sample")', function() {
        // TODO: update the code to test the property doSample
        expect(instance).to.have.property('doSample');
        // expect(instance.doSample).to.be(expectedValueLiteral);
      });

      it('should have the property numBeams (base name: "num_beams")', function() {
        // TODO: update the code to test the property numBeams
        expect(instance).to.have.property('numBeams');
        // expect(instance.numBeams).to.be(expectedValueLiteral);
      });

      it('should have the property noRepeatNgramSize (base name: "no_repeat_ngram_size")', function() {
        // TODO: update the code to test the property noRepeatNgramSize
        expect(instance).to.have.property('noRepeatNgramSize');
        // expect(instance.noRepeatNgramSize).to.be(expectedValueLiteral);
      });

      it('should have the property contextWindowSize (base name: "context_window_size")', function() {
        // TODO: update the code to test the property contextWindowSize
        expect(instance).to.have.property('contextWindowSize');
        // expect(instance.contextWindowSize).to.be(expectedValueLiteral);
      });

      it('should have the property slidingWindowSize (base name: "sliding_window_size")', function() {
        // TODO: update the code to test the property slidingWindowSize
        expect(instance).to.have.property('slidingWindowSize');
        // expect(instance.slidingWindowSize).to.be(expectedValueLiteral);
      });

      it('should have the property attentionSinkSize (base name: "attention_sink_size")', function() {
        // TODO: update the code to test the property attentionSinkSize
        expect(instance).to.have.property('attentionSinkSize');
        // expect(instance.attentionSinkSize).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyPenalty (base name: "frequency_penalty")', function() {
        // TODO: update the code to test the property frequencyPenalty
        expect(instance).to.have.property('frequencyPenalty');
        // expect(instance.frequencyPenalty).to.be(expectedValueLiteral);
      });

      it('should have the property presencePenalty (base name: "presence_penalty")', function() {
        // TODO: update the code to test the property presencePenalty
        expect(instance).to.have.property('presencePenalty');
        // expect(instance.presencePenalty).to.be(expectedValueLiteral);
      });

      it('should have the property bosTokenId (base name: "bos_token_id")', function() {
        // TODO: update the code to test the property bosTokenId
        expect(instance).to.have.property('bosTokenId');
        // expect(instance.bosTokenId).to.be(expectedValueLiteral);
      });

      it('should have the property maxTokens (base name: "max_tokens")', function() {
        // TODO: update the code to test the property maxTokens
        expect(instance).to.have.property('maxTokens');
        // expect(instance.maxTokens).to.be(expectedValueLiteral);
      });

      it('should have the property randomSeed (base name: "random_seed")', function() {
        // TODO: update the code to test the property randomSeed
        expect(instance).to.have.property('randomSeed');
        // expect(instance.randomSeed).to.be(expectedValueLiteral);
      });

    });
  });

}));
