/*
 * Woolball AI Network API
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.71
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WoolballAiNetworkApi);
  }
}(this, function(expect, WoolballAiNetworkApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpeechToTextRequestContract', function() {
      beforeEach(function() {
        instance = new WoolballAiNetworkApi.SpeechToTextRequestContract();
      });

      it('should create an instance of SpeechToTextRequestContract', function() {
        // TODO: update the code to test SpeechToTextRequestContract
        expect(instance).to.be.a(WoolballAiNetworkApi.SpeechToTextRequestContract);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property dtype (base name: "dtype")', function() {
        // TODO: update the code to test the property dtype
        expect(instance).to.have.property('dtype');
        // expect(instance.dtype).to.be(expectedValueLiteral);
      });

      it('should have the property input (base name: "input")', function() {
        // TODO: update the code to test the property input
        expect(instance).to.have.property('input');
        // expect(instance.input).to.be(expectedValueLiteral);
      });

      it('should have the property returnTimestamps (base name: "return_timestamps")', function() {
        // TODO: update the code to test the property returnTimestamps
        expect(instance).to.have.property('returnTimestamps');
        // expect(instance.returnTimestamps).to.be(expectedValueLiteral);
      });

      it('should have the property stream (base name: "stream")', function() {
        // TODO: update the code to test the property stream
        expect(instance).to.have.property('stream');
        // expect(instance.stream).to.be(expectedValueLiteral);
      });

      it('should have the property chunkLengthS (base name: "chunk_length_s")', function() {
        // TODO: update the code to test the property chunkLengthS
        expect(instance).to.have.property('chunkLengthS');
        // expect(instance.chunkLengthS).to.be(expectedValueLiteral);
      });

      it('should have the property strideLengthS (base name: "stride_length_s")', function() {
        // TODO: update the code to test the property strideLengthS
        expect(instance).to.have.property('strideLengthS');
        // expect(instance.strideLengthS).to.be(expectedValueLiteral);
      });

      it('should have the property forceFullSequences (base name: "force_full_sequences")', function() {
        // TODO: update the code to test the property forceFullSequences
        expect(instance).to.have.property('forceFullSequences');
        // expect(instance.forceFullSequences).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property task (base name: "task")', function() {
        // TODO: update the code to test the property task
        expect(instance).to.have.property('task');
        // expect(instance.task).to.be(expectedValueLiteral);
      });

      it('should have the property numFrames (base name: "num_frames")', function() {
        // TODO: update the code to test the property numFrames
        expect(instance).to.have.property('numFrames');
        // expect(instance.numFrames).to.be(expectedValueLiteral);
      });

    });
  });

}));
