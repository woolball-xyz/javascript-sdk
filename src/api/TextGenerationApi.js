/*
 * Woolball AI Network API
 * **Transform idle browsers into a powerful distributed AI inference network**  For detailed examples and model lists, visit our [GitHub repository](https://github.com/woolball-xyz/woolball-server).
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.71
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import TextGenerationResponse from '../model/TextGenerationResponse';

/**
* TextGeneration service.
* @module api/TextGenerationApi
* @version v1
*/
export default class TextGenerationApi {

    /**
    * Constructs a new TextGenerationApi. 
    * @alias module:api/TextGenerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the textGeneration operation.
     * @callback moduleapi/TextGenerationApi~textGenerationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextGenerationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Text Generation - Multi-Provider
     * Generate text using multiple AI providers (Transformers.js, WebLLM, MediaPipe). Use the &#x27;provider&#x27; field to specify which AI provider to use for text generation.
     * @param {module:model/String} provider 
     * @param {String} model 
     * @param {String} input 
     * @param {Number} topK 
     * @param {Number} topP 
     * @param {Number} temperature 
     * @param {Number} repetitionPenalty 
     * @param {String} dtype 
     * @param {Number} maxLength 
     * @param {Number} maxNewTokens 
     * @param {Number} minLength 
     * @param {Number} minNewTokens 
     * @param {Boolean} doSample 
     * @param {Number} numBeams 
     * @param {Number} noRepeatNgramSize 
     * @param {Number} contextWindowSize 
     * @param {Number} slidingWindowSize 
     * @param {Number} attentionSinkSize 
     * @param {Number} frequencyPenalty 
     * @param {Number} presencePenalty 
     * @param {Number} bosTokenId 
     * @param {Number} maxTokens 
     * @param {Number} randomSeed 
     * @param {module:api/TextGenerationApi~textGenerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    textGeneration(provider, model, input, topK, topP, temperature, repetitionPenalty, dtype, maxLength, maxNewTokens, minLength, minNewTokens, doSample, numBeams, noRepeatNgramSize, contextWindowSize, slidingWindowSize, attentionSinkSize, frequencyPenalty, presencePenalty, bosTokenId, maxTokens, randomSeed, callback) {
      
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling textGeneration");
      }
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling textGeneration");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling textGeneration");
      }
      // verify the required parameter 'topK' is set
      if (topK === undefined || topK === null) {
        throw new Error("Missing the required parameter 'topK' when calling textGeneration");
      }
      // verify the required parameter 'topP' is set
      if (topP === undefined || topP === null) {
        throw new Error("Missing the required parameter 'topP' when calling textGeneration");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling textGeneration");
      }
      // verify the required parameter 'repetitionPenalty' is set
      if (repetitionPenalty === undefined || repetitionPenalty === null) {
        throw new Error("Missing the required parameter 'repetitionPenalty' when calling textGeneration");
      }
      // verify the required parameter 'dtype' is set
      if (dtype === undefined || dtype === null) {
        throw new Error("Missing the required parameter 'dtype' when calling textGeneration");
      }
      // verify the required parameter 'maxLength' is set
      if (maxLength === undefined || maxLength === null) {
        throw new Error("Missing the required parameter 'maxLength' when calling textGeneration");
      }
      // verify the required parameter 'maxNewTokens' is set
      if (maxNewTokens === undefined || maxNewTokens === null) {
        throw new Error("Missing the required parameter 'maxNewTokens' when calling textGeneration");
      }
      // verify the required parameter 'minLength' is set
      if (minLength === undefined || minLength === null) {
        throw new Error("Missing the required parameter 'minLength' when calling textGeneration");
      }
      // verify the required parameter 'minNewTokens' is set
      if (minNewTokens === undefined || minNewTokens === null) {
        throw new Error("Missing the required parameter 'minNewTokens' when calling textGeneration");
      }
      // verify the required parameter 'doSample' is set
      if (doSample === undefined || doSample === null) {
        throw new Error("Missing the required parameter 'doSample' when calling textGeneration");
      }
      // verify the required parameter 'numBeams' is set
      if (numBeams === undefined || numBeams === null) {
        throw new Error("Missing the required parameter 'numBeams' when calling textGeneration");
      }
      // verify the required parameter 'noRepeatNgramSize' is set
      if (noRepeatNgramSize === undefined || noRepeatNgramSize === null) {
        throw new Error("Missing the required parameter 'noRepeatNgramSize' when calling textGeneration");
      }
      // verify the required parameter 'contextWindowSize' is set
      if (contextWindowSize === undefined || contextWindowSize === null) {
        throw new Error("Missing the required parameter 'contextWindowSize' when calling textGeneration");
      }
      // verify the required parameter 'slidingWindowSize' is set
      if (slidingWindowSize === undefined || slidingWindowSize === null) {
        throw new Error("Missing the required parameter 'slidingWindowSize' when calling textGeneration");
      }
      // verify the required parameter 'attentionSinkSize' is set
      if (attentionSinkSize === undefined || attentionSinkSize === null) {
        throw new Error("Missing the required parameter 'attentionSinkSize' when calling textGeneration");
      }
      // verify the required parameter 'frequencyPenalty' is set
      if (frequencyPenalty === undefined || frequencyPenalty === null) {
        throw new Error("Missing the required parameter 'frequencyPenalty' when calling textGeneration");
      }
      // verify the required parameter 'presencePenalty' is set
      if (presencePenalty === undefined || presencePenalty === null) {
        throw new Error("Missing the required parameter 'presencePenalty' when calling textGeneration");
      }
      // verify the required parameter 'bosTokenId' is set
      if (bosTokenId === undefined || bosTokenId === null) {
        throw new Error("Missing the required parameter 'bosTokenId' when calling textGeneration");
      }
      // verify the required parameter 'maxTokens' is set
      if (maxTokens === undefined || maxTokens === null) {
        throw new Error("Missing the required parameter 'maxTokens' when calling textGeneration");
      }
      // verify the required parameter 'randomSeed' is set
      if (randomSeed === undefined || randomSeed === null) {
        throw new Error("Missing the required parameter 'randomSeed' when calling textGeneration");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'provider': provider,'model': model,'input': input,'top_k': topK,'top_p': topP,'temperature': temperature,'repetition_penalty': repetitionPenalty,'dtype': dtype,'max_length': maxLength,'max_new_tokens': maxNewTokens,'min_length': minLength,'min_new_tokens': minNewTokens,'do_sample': doSample,'num_beams': numBeams,'no_repeat_ngram_size': noRepeatNgramSize,'context_window_size': contextWindowSize,'sliding_window_size': slidingWindowSize,'attention_sink_size': attentionSinkSize,'frequency_penalty': frequencyPenalty,'presence_penalty': presencePenalty,'bos_token_id': bosTokenId,'max_tokens': maxTokens,'random_seed': randomSeed
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TextGenerationResponse;

      return this.apiClient.callApi(
        '/api/v1/text-generation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}